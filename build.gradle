plugins {
    id 'kotlin-multiplatform' version '1.3.11'
    id 'maven-publish'
}
repositories {
    mavenCentral()
}

group 'com.dominaezzz'
version '0.0.1'

final def os = org.gradle.internal.os.OperatingSystem.current()

kotlin {
	final def nativePreset = os.isWindows() ? presets.mingwX64
			: os.isLinux()   ? presets.linuxX64
			: os.isMacOsX()  ? presets.macosX64
			: /*unknown host*/ null
    targets {
        // For ARM, preset should be changed to presets.iosArm32 or presets.iosArm64
        fromPreset(nativePreset, 'native') {
			compilations.main.cinterops {
				sqlite3 {
					switch (nativePreset) {
						case presets.mingwX64:
							includeDirs "C:/msys64/mingw64/include"
							break
						case presets.linuxX64:
							includeDirs "/usr/include", "/usr/include/x86_64-linux-gnu"
							break
						case presets.macosX64:
							includeDirs "/usr/local/include", "/opt/local/include"
							break
					}
				}
			}
			switch (nativePreset) {
				case presets.mingwX64:
					compilations.test.linkerOpts '-LC:/msys64/mingw64/lib -Wl,-Bstatic -lstdc++ -static'
					break
				case presets.linuxX64:
					compilations.test.linkerOpts '-L/usr/lib -L/usr/lib/x86_64-linux-gnu'
					break
				case presets.macosX64:
					compilations.test.linkerOpts '-L/usr/local/lib'
					break
			}
		}
    }
    sourceSets {
        // Note: To enable common source sets please comment out 'kotlin.import.noCommonSourceSets' property
        // in gradle.properties file and re-import your project in IDE.
        nativeMain {
        }
        nativeTest {
        }
    }
}

kotlin.targets.all {
	compilations.all { compilation ->
		tasks.getByName(compilation.compileKotlinTaskName) {
			kotlinOptions.freeCompilerArgs = ["-XXLanguage:+InlineClasses", "-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"]
		}
	}
}
