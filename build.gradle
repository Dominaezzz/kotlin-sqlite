buildscript {
	repositories {
		jcenter()
		maven { url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
	}
	dependencies {
		classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.2-SNAPSHOT"
	}
}

plugins {
    id 'kotlin-multiplatform' version '1.3.11'
    id 'maven-publish'
}
repositories {
    mavenCentral()
}

final def os = org.gradle.internal.os.OperatingSystem.current()

kotlin {
	if (os.isWindows() || System.getProperty("idea.active") != "true") {
		targets {
			fromPreset(presets.mingwX64, 'mingw') {
				compilations.main.cinterops {
					sqlite3 {
						includeDirs "C:/msys64/mingw64/include"
					}
				}
				compilations.test.linkerOpts '-LC:/msys64/mingw64/lib -Wl,-Bstatic -lstdc++ -static'
			}
		}
		sourceSets {
			mingwMain {
				kotlin.srcDir('src/nativeMain/kotlin')
			}
			mingwTest {
				kotlin.srcDir('src/nativeTest/kotlin')
			}
		}
	}
	if (os.isLinux() || System.getProperty("idea.active") != "true") {
		targets {
			fromPreset(presets.linuxX64, 'linux') {
				compilations.main.cinterops {
					sqlite3 {
						includeDirs "/usr/include", "/usr/include/x86_64-linux-gnu"
					}
				}
				compilations.test.linkerOpts '-L/usr/lib -L/usr/lib/x86_64-linux-gnu'
			}
		}
		sourceSets {
			linuxMain {
				kotlin.srcDir('src/nativeMain/kotlin')
			}
			linuxTest {
				kotlin.srcDir('src/nativeTest/kotlin')
			}
		}
	}
	if (os.isMacOsX() || System.getProperty("idea.active") != "true") {
		targets {
			fromPreset(presets.macosX64, 'macos') {
				compilations.main.cinterops {
					sqlite3 {
						includeDirs "/usr/local/include", "/opt/local/include"
					}
				}
				compilations.test.linkerOpts '-L/usr/local/lib'
			}
			if (System.getProperty("idea.active") != "true") {
				// fromPreset(presets.iosArm32, '')
				// fromPreset(presets.iosArm64, '')
			}
		}
		sourceSets {
			macosMain {
				kotlin.srcDir('src/nativeMain/kotlin')
			}
			macosTest {
				kotlin.srcDir('src/nativeTest/kotlin')
			}
		}
	}
}

kotlin.targets.all {
	compilations.all { compilation ->
		tasks.getByName(compilation.compileKotlinTaskName) {
			kotlinOptions.freeCompilerArgs = ["-XXLanguage:+InlineClasses", "-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"]
		}
	}
}

apply from: rootProject.file("gradle/publish.gradle")
